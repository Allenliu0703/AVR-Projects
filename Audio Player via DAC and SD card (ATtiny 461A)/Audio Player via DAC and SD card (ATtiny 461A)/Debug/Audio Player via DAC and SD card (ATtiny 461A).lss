
Audio Player via DAC and SD card (ATtiny 461A).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fee  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000248  00000000  00000000  0000142a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fe  00000000  00000000  00001672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000269  00000000  00000000  00001bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ede  00000000  00000000  00001e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  00002d3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d1 e0       	ldi	r29, 0x01	; 1
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	1c d1       	rcall	.+568    	; 0x27c <main>
  44:	6a c1       	rjmp	.+724    	; 0x31a <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <SPI_Init>:
	SPI_Write(0x9E);
	SPI_Write(0x4A);
	SPI_Write(0xFF);

	for(int i=0; i<100 && SPI_Write(0xFF) != 0x00; i++) {} // wait for 
    for(int i=0; i<100 && SPI_Write(0xFF) != 0xFE; i++) {} // wait for data start
  48:	87 b3       	in	r24, 0x17	; 23
  4a:	86 64       	ori	r24, 0x46	; 70
  4c:	87 bb       	out	0x17, r24	; 23
  4e:	b8 98       	cbi	0x17, 0	; 23
  50:	c0 9a       	sbi	0x18, 0	; 24
  52:	80 e1       	ldi	r24, 0x10	; 16
  54:	8d b9       	out	0x0d, r24	; 13
  56:	08 95       	ret

00000058 <SPI_Write>:
  58:	8f b9       	out	0x0f, r24	; 15

/*Skip the header of wav file*/
	for(int i=0; i<58; i++){
		//x[i]=SPI_Write(0xFF);
		SPI_Write(0xFF);
  5a:	88 e0       	ldi	r24, 0x08	; 8
  5c:	21 e1       	ldi	r18, 0x11	; 17
  5e:	93 e1       	ldi	r25, 0x13	; 19

	for(int i=0; i<100 && SPI_Write(0xFF) != 0x00; i++) {} // wait for 
    for(int i=0; i<100 && SPI_Write(0xFF) != 0xFE; i++) {} // wait for data start

/*Skip the header of wav file*/
	for(int i=0; i<58; i++){
  60:	2d b9       	out	0x0d, r18	; 13
  62:	9d b9       	out	0x0d, r25	; 13
  64:	81 50       	subi	r24, 0x01	; 1
		SPI_Write(0xFF);
	}
/*Read the data in first sector*/
	for(int i=58; i<256; i++){
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
  66:	e1 f7       	brne	.-8      	; 0x60 <SPI_Write+0x8>
  68:	8f b1       	in	r24, 0x0f	; 15
  6a:	08 95       	ret

0000006c <SD_read_leilei>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6c:	ef 92       	push	r14
  6e:	ff 92       	push	r15
  70:	0f 93       	push	r16
  72:	1f 93       	push	r17
  74:	cf 93       	push	r28
  76:	df 93       	push	r29
  78:	c6 98       	cbi	0x18, 6	; 24
	for(int i=0; i<58; i++){
		//x[i]=SPI_Write(0xFF);
		SPI_Write(0xFF);
	}
/*Read the data in first sector*/
	for(int i=58; i<256; i++){
  7a:	82 e5       	ldi	r24, 0x52	; 82
  7c:	ed df       	rcall	.-38     	; 0x58 <SPI_Write>
  7e:	80 e0       	ldi	r24, 0x00	; 0
		_delay_us(200);
	}
//(void)x[0];
	for(int i=0; i<256; i++){
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
  80:	eb df       	rcall	.-42     	; 0x58 <SPI_Write>
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	e9 df       	rcall	.-46     	; 0x58 <SPI_Write>
  86:	89 e9       	ldi	r24, 0x99	; 153
  88:	e7 df       	rcall	.-50     	; 0x58 <SPI_Write>
  8a:	8a eb       	ldi	r24, 0xBA	; 186
  8c:	e5 df       	rcall	.-54     	; 0x58 <SPI_Write>
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	e3 df       	rcall	.-58     	; 0x58 <SPI_Write>
  92:	c4 e6       	ldi	r28, 0x64	; 100
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
		_delay_us(200);
	}
//(void)x[0];
	for(int i=0; i<256; i++){
  94:	d0 e0       	ldi	r29, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <SD_read_leilei+0x30>
  98:	21 97       	sbiw	r28, 0x01	; 1
  9a:	51 f0       	breq	.+20     	; 0xb0 <SD_read_leilei+0x44>
  9c:	8f ef       	ldi	r24, 0xFF	; 255
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
		_delay_us(200);
	}
//(void)x[0];
	for(int i=0; i<50 && SPI_Write(0xFF) != 0xFE; i++) {} // wait for data start
  9e:	dc df       	rcall	.-72     	; 0x58 <SPI_Write>
  a0:	81 11       	cpse	r24, r1
  a2:	fa cf       	rjmp	.-12     	; 0x98 <SD_read_leilei+0x2c>
  a4:	c4 e6       	ldi	r28, 0x64	; 100
  a6:	d0 e0       	ldi	r29, 0x00	; 0
  a8:	05 c0       	rjmp	.+10     	; 0xb4 <SD_read_leilei+0x48>
  aa:	21 97       	sbiw	r28, 0x01	; 1
  ac:	19 f4       	brne	.+6      	; 0xb4 <SD_read_leilei+0x48>

/* Run 61 cycles to read the middle 61 sectors*/
for (int j=0; j<=60; j++){
	for(int i=0; i<256; i++){
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
  ae:	09 c0       	rjmp	.+18     	; 0xc2 <SD_read_leilei+0x56>
  b0:	c4 e6       	ldi	r28, 0x64	; 100
  b2:	d0 e0       	ldi	r29, 0x00	; 0
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	d0 df       	rcall	.-96     	; 0x58 <SPI_Write>
  b8:	8e 3f       	cpi	r24, 0xFE	; 254
  ba:	b9 f7       	brne	.-18     	; 0xaa <SD_read_leilei+0x3e>
  bc:	ca e3       	ldi	r28, 0x3A	; 58
  be:	d0 e0       	ldi	r29, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <SD_read_leilei+0x5a>
//(void)x[0];
	for(int i=0; i<50 && SPI_Write(0xFF) != 0xFE; i++) {} // wait for data start

/* Run 61 cycles to read the middle 61 sectors*/
for (int j=0; j<=60; j++){
	for(int i=0; i<256; i++){
  c2:	ca e3       	ldi	r28, 0x3A	; 58
  c4:	d0 e0       	ldi	r29, 0x00	; 0
  c6:	8f ef       	ldi	r24, 0xFF	; 255
		_delay_us(200);
	}
//(void)x[0];
	for(int i=0; i<256; i++){
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
  c8:	c7 df       	rcall	.-114    	; 0x58 <SPI_Write>
  ca:	21 97       	sbiw	r28, 0x01	; 1
  cc:	e1 f7       	brne	.-8      	; 0xc6 <SD_read_leilei+0x5a>
  ce:	c6 ec       	ldi	r28, 0xC6	; 198
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	c1 df       	rcall	.-126    	; 0x58 <SPI_Write>
  d6:	8b bb       	out	0x1b, r24	; 27
  d8:	8d e9       	ldi	r24, 0x9D	; 157
  da:	8a 95       	dec	r24
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
		_delay_us(200);
	}
//(void)x[0];
	for(int i=0; i<256; i++){
  dc:	f1 f7       	brne	.-4      	; 0xda <SD_read_leilei+0x6e>
  de:	00 00       	nop
  e0:	21 97       	sbiw	r28, 0x01	; 1
  e2:	b9 f7       	brne	.-18     	; 0xd2 <SD_read_leilei+0x66>
  e4:	c0 e0       	ldi	r28, 0x00	; 0
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
		_delay_us(200);
	}
//(void)x[0];
	for(int i=0; i<50 && SPI_Write(0xFF) != 0xFE; i++) {} // wait for data start
  e6:	d1 e0       	ldi	r29, 0x01	; 1
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	b6 df       	rcall	.-148    	; 0x58 <SPI_Write>
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	8d e9       	ldi	r24, 0x9D	; 157
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <SD_read_leilei+0x84>
	}
//(void)x[0];
	for(int i=0; i<50 && SPI_Write(0xFF) != 0xFE; i++) {} // wait for data start

/* Run 61 cycles to read the middle 61 sectors*/
for (int j=0; j<=60; j++){
  f4:	00 00       	nop
  f6:	21 97       	sbiw	r28, 0x01	; 1
  f8:	b9 f7       	brne	.-18     	; 0xe8 <SD_read_leilei+0x7c>
  fa:	c2 e3       	ldi	r28, 0x32	; 50
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <SD_read_leilei+0x98>
 100:	21 97       	sbiw	r28, 0x01	; 1
 102:	41 f1       	breq	.+80     	; 0x154 <SD_read_leilei+0xe8>
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	a8 df       	rcall	.-176    	; 0x58 <SPI_Write>
 108:	8e 3f       	cpi	r24, 0xFE	; 254
 10a:	d1 f7       	brne	.-12     	; 0x100 <SD_read_leilei+0x94>
}

/*Read for the last sector of the audio file*/
	for(int i=0; i<256; i++){
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
 10c:	0f e9       	ldi	r16, 0x9F	; 159
 10e:	10 e0       	ldi	r17, 0x00	; 0
 110:	23 c0       	rjmp	.+70     	; 0x158 <SD_read_leilei+0xec>
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	a1 df       	rcall	.-190    	; 0x58 <SPI_Write>
 116:	8b bb       	out	0x1b, r24	; 27
 118:	8d e9       	ldi	r24, 0x9D	; 157
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <SD_read_leilei+0xae>
 11e:	00 00       	nop
//(void)x[0];
	for(int i=0; i<50 && SPI_Write(0xFF) != 0xFE; i++) {} // wait for data start
}

/*Read for the last sector of the audio file*/
	for(int i=0; i<256; i++){
 120:	21 97       	sbiw	r28, 0x01	; 1
 122:	b9 f7       	brne	.-18     	; 0x112 <SD_read_leilei+0xa6>
 124:	ce 2d       	mov	r28, r14
		_delay_us(200);
	}
//(void)x[0];
	for(int i=0; i<256; i++){
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
 126:	df 2d       	mov	r29, r15
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	96 df       	rcall	.-212    	; 0x58 <SPI_Write>
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	8d e9       	ldi	r24, 0x9D	; 157
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <SD_read_leilei+0xc4>
 134:	00 00       	nop
 136:	21 97       	sbiw	r28, 0x01	; 1
 138:	b9 f7       	brne	.-18     	; 0x128 <SD_read_leilei+0xbc>
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
		_delay_us(200);
	}
//(void)x[0];
	for(int i=0; i<256; i++){
 13a:	c2 e3       	ldi	r28, 0x32	; 50
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <SD_read_leilei+0xd8>
 140:	21 97       	sbiw	r28, 0x01	; 1
 142:	21 f0       	breq	.+8      	; 0x14c <SD_read_leilei+0xe0>
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
		_delay_us(200);
	}
//(void)x[0];
    for(int i=0; i<50 && SPI_Write(0xFF) != 0xFE; i++) {} // wait for data start
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	88 df       	rcall	.-240    	; 0x58 <SPI_Write>
 148:	8e 3f       	cpi	r24, 0xFE	; 254
 14a:	d1 f7       	brne	.-12     	; 0x140 <SD_read_leilei+0xd4>
 14c:	01 50       	subi	r16, 0x01	; 1

	SPI_Write(0xFF);//for CRC
 14e:	11 09       	sbc	r17, r1
 150:	31 f4       	brne	.+12     	; 0x15e <SD_read_leilei+0xf2>
	SPI_Write(0xFF);//for CRC
 152:	08 c0       	rjmp	.+16     	; 0x164 <__stack+0x5>
 154:	0f e9       	ldi	r16, 0x9F	; 159
	CS_DISABLE();
 156:	10 e0       	ldi	r17, 0x00	; 0
}
 158:	e1 2c       	mov	r14, r1
 15a:	ff 24       	eor	r15, r15
 15c:	f3 94       	inc	r15
 15e:	ce 2d       	mov	r28, r14
 160:	df 2d       	mov	r29, r15
 162:	d7 cf       	rjmp	.-82     	; 0x112 <SD_read_leilei+0xa6>
 164:	c0 e0       	ldi	r28, 0x00	; 0
	}
	//(void)x[0];
	for(int i=0; i<50 && SPI_Write(0xFF) != 0xFE; i++) {} // wait for data start

	/* Run 159 cycles to read the middle 61 sectors*/
	for (int j=0; j<=158; j++){
 166:	d1 e0       	ldi	r29, 0x01	; 1
	}

	/*Read for the last sector of the audio file*/
	for(int i=0; i<256; i++){
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	76 df       	rcall	.-276    	; 0x58 <SPI_Write>
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	8d e9       	ldi	r24, 0x9D	; 157
 170:	8a 95       	dec	r24
 172:	f1 f7       	brne	.-4      	; 0x170 <__stack+0x11>
 174:	00 00       	nop
 176:	21 97       	sbiw	r28, 0x01	; 1
		//(void)x[0];
		for(int i=0; i<50 && SPI_Write(0xFF) != 0xFE; i++) {} // wait for data start
	}

	/*Read for the last sector of the audio file*/
	for(int i=0; i<256; i++){
 178:	b9 f7       	brne	.-18     	; 0x168 <__stack+0x9>
 17a:	c2 e3       	ldi	r28, 0x32	; 50
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <__stack+0x25>
 180:	21 97       	sbiw	r28, 0x01	; 1
		//x[i]=SPI_Write(0xFF);
		PORTA = SPI_Write(0xFF);
		_delay_us(59);
	}
	//(void)x[0];
	for(int i=0; i<50 && SPI_Write(0xFF) != 0xFE; i++) {} // wait for data start
 182:	21 f0       	breq	.+8      	; 0x18c <__stack+0x2d>
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	68 df       	rcall	.-304    	; 0x58 <SPI_Write>
 188:	8e 3f       	cpi	r24, 0xFE	; 254
 18a:	d1 f7       	brne	.-12     	; 0x180 <__stack+0x21>

	SPI_Write(0xFF);//for CRC
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	64 df       	rcall	.-312    	; 0x58 <SPI_Write>
	SPI_Write(0xFF);//for CRC
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	62 df       	rcall	.-316    	; 0x58 <SPI_Write>
	CS_DISABLE();
 194:	c6 9a       	sbi	0x18, 6	; 24
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <SD_Command>:

    CS_DISABLE();    
}

void SD_Command(unsigned char cmd, unsigned long arg,
unsigned char crc, uint16_t read) {
 1a4:	8f 92       	push	r8
 1a6:	9f 92       	push	r9
 1a8:	af 92       	push	r10
 1aa:	bf 92       	push	r11
 1ac:	cf 92       	push	r12
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	a8 97       	sbiw	r28, 0x28	; 40
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
 1cc:	e4 2e       	mov	r14, r20
 1ce:	d5 2e       	mov	r13, r21
 1d0:	c6 2e       	mov	r12, r22
 1d2:	b7 2e       	mov	r11, r23
 1d4:	f2 2e       	mov	r15, r18
	uint32_t i, buffer[8];
	volatile uint8_t a,b,c,d,e,f,g,h;
	CS_ENABLE();
 1d6:	c6 98       	cbi	0x18, 6	; 24
	SPI_Write(cmd);
 1d8:	3f df       	rcall	.-386    	; 0x58 <SPI_Write>
	SPI_Write(arg>>24);
 1da:	8b 2d       	mov	r24, r11
 1dc:	3d df       	rcall	.-390    	; 0x58 <SPI_Write>
	SPI_Write(arg>>16);
 1de:	8c 2d       	mov	r24, r12
 1e0:	3b df       	rcall	.-394    	; 0x58 <SPI_Write>
	SPI_Write(arg>>8);
 1e2:	8d 2d       	mov	r24, r13
 1e4:	39 df       	rcall	.-398    	; 0x58 <SPI_Write>
	SPI_Write(arg);
 1e6:	8e 2d       	mov	r24, r14
 1e8:	37 df       	rcall	.-402    	; 0x58 <SPI_Write>
	SPI_Write(crc);
 1ea:	8f 2d       	mov	r24, r15
 1ec:	35 df       	rcall	.-406    	; 0x58 <SPI_Write>
	
	for(i=0; i<read; i++){
 1ee:	68 01       	movw	r12, r16
 1f0:	e1 2c       	mov	r14, r1
 1f2:	f1 2c       	mov	r15, r1
 1f4:	c1 14       	cp	r12, r1
 1f6:	d1 04       	cpc	r13, r1
 1f8:	e1 04       	cpc	r14, r1
 1fa:	f1 04       	cpc	r15, r1
 1fc:	d9 f0       	breq	.+54     	; 0x234 <SD_Command+0x90>
 1fe:	8e 01       	movw	r16, r28
 200:	0f 5f       	subi	r16, 0xFF	; 255
 202:	1f 4f       	sbci	r17, 0xFF	; 255
 204:	81 2c       	mov	r8, r1
 206:	91 2c       	mov	r9, r1
 208:	54 01       	movw	r10, r8
		buffer[i] = SPI_Write(0xFF);
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	25 df       	rcall	.-438    	; 0x58 <SPI_Write>
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	a0 e0       	ldi	r26, 0x00	; 0
 212:	b0 e0       	ldi	r27, 0x00	; 0
 214:	f8 01       	movw	r30, r16
 216:	81 93       	st	Z+, r24
 218:	91 93       	st	Z+, r25
 21a:	a1 93       	st	Z+, r26
 21c:	b1 93       	st	Z+, r27
 21e:	8f 01       	movw	r16, r30
	SPI_Write(arg>>16);
	SPI_Write(arg>>8);
	SPI_Write(arg);
	SPI_Write(crc);
	
	for(i=0; i<read; i++){
 220:	ff ef       	ldi	r31, 0xFF	; 255
 222:	8f 1a       	sub	r8, r31
 224:	9f 0a       	sbc	r9, r31
 226:	af 0a       	sbc	r10, r31
 228:	bf 0a       	sbc	r11, r31
 22a:	8c 14       	cp	r8, r12
 22c:	9d 04       	cpc	r9, r13
 22e:	ae 04       	cpc	r10, r14
 230:	bf 04       	cpc	r11, r15
 232:	59 f7       	brne	.-42     	; 0x20a <SD_Command+0x66>
		buffer[i] = SPI_Write(0xFF);
	}
	a = buffer[0];
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	89 a3       	std	Y+33, r24	; 0x21
	b = buffer[1];
 238:	8d 81       	ldd	r24, Y+5	; 0x05
 23a:	8a a3       	std	Y+34, r24	; 0x22
	c = buffer[2];
 23c:	89 85       	ldd	r24, Y+9	; 0x09
 23e:	8b a3       	std	Y+35, r24	; 0x23
	d = buffer[3];
 240:	8d 85       	ldd	r24, Y+13	; 0x0d
 242:	8c a3       	std	Y+36, r24	; 0x24
	e = buffer[4];
 244:	89 89       	ldd	r24, Y+17	; 0x11
 246:	8d a3       	std	Y+37, r24	; 0x25
	f = buffer[5];
 248:	8d 89       	ldd	r24, Y+21	; 0x15
 24a:	8e a3       	std	Y+38, r24	; 0x26
	g = buffer[6];
 24c:	89 8d       	ldd	r24, Y+25	; 0x19
 24e:	8f a3       	std	Y+39, r24	; 0x27
	h = buffer[7];
 250:	8d 8d       	ldd	r24, Y+29	; 0x1d
 252:	88 a7       	std	Y+40, r24	; 0x28
	CS_DISABLE();
 254:	c6 9a       	sbi	0x18, 6	; 24
}
 256:	a8 96       	adiw	r28, 0x28	; 40
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	cd bf       	out	0x3d, r28	; 61
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	bf 90       	pop	r11
 274:	af 90       	pop	r10
 276:	9f 90       	pop	r9
 278:	8f 90       	pop	r8
 27a:	08 95       	ret

0000027c <main>:


int main(void)
{
	uint8_t* buffer;
    DDRA = 0xFF;
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	8a bb       	out	0x1a, r24	; 26
	SPI_Init();
 280:	e3 de       	rcall	.-570    	; 0x48 <SPI_Init>
	//_delay_ms(2000);
	while (1)
	{
		CS_DISABLE();
 282:	0f 2e       	mov	r0, r31
 284:	fa e0       	ldi	r31, 0x0A	; 10
 286:	ef 2e       	mov	r14, r31
 288:	f0 2d       	mov	r31, r0
 28a:	f1 2c       	mov	r15, r1
 28c:	c6 9a       	sbi	0x18, 6	; 24
 28e:	ce 2d       	mov	r28, r14
 290:	df 2d       	mov	r29, r15
		for(int i=0; i<10; i++) // idle for 1 bytes / 80 clocks
			SPI_Write(0xFF);
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	e1 de       	rcall	.-574    	; 0x58 <SPI_Write>
 296:	21 97       	sbiw	r28, 0x01	; 1
	SPI_Init();
	//_delay_ms(2000);
	while (1)
	{
		CS_DISABLE();
		for(int i=0; i<10; i++) // idle for 1 bytes / 80 clocks
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x16>
			SPI_Write(0xFF);
		SD_Command(0x40, 0x00000000, 0x95, 8);//CMD0 to reset the SD card.
 29a:	08 e0       	ldi	r16, 0x08	; 8
 29c:	10 e0       	ldi	r17, 0x00	; 0
 29e:	25 e9       	ldi	r18, 0x95	; 149
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	ba 01       	movw	r22, r20
 2a6:	80 e4       	ldi	r24, 0x40	; 64
 2a8:	7d df       	rcall	.-262    	; 0x1a4 <SD_Command>
		SD_Command(0x48, 0x000001AA, 0x87, 8);//CMD8 to support SDHC card.
 2aa:	27 e8       	ldi	r18, 0x87	; 135
 2ac:	4a ea       	ldi	r20, 0xAA	; 170
 2ae:	51 e0       	ldi	r21, 0x01	; 1
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	88 e4       	ldi	r24, 0x48	; 72
 2b6:	76 df       	rcall	.-276    	; 0x1a4 <SD_Command>
		SD_Command(0x7A, 0x00000000, 0xFF, 8);//CMD58 check OCR
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	ba 01       	movw	r22, r20
 2c0:	8a e7       	ldi	r24, 0x7A	; 122
 2c2:	70 df       	rcall	.-288    	; 0x1a4 <SD_Command>
		SD_Command(0x77, 0x00000000, 0x65, 8);//CMD55
 2c4:	25 e6       	ldi	r18, 0x65	; 101
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	ba 01       	movw	r22, r20
 2cc:	87 e7       	ldi	r24, 0x77	; 119
 2ce:	6a df       	rcall	.-300    	; 0x1a4 <SD_Command>
		SD_Command(0x69, 0x40000000, 0x5F, 8);//ACMD41
 2d0:	2f e5       	ldi	r18, 0x5F	; 95
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	70 e4       	ldi	r23, 0x40	; 64
 2da:	89 e6       	ldi	r24, 0x69	; 105
 2dc:	63 df       	rcall	.-314    	; 0x1a4 <SD_Command>
		SD_Command(0x77, 0x00000000, 0x65, 8);//CMD55
 2de:	25 e6       	ldi	r18, 0x65	; 101
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	ba 01       	movw	r22, r20
 2e6:	87 e7       	ldi	r24, 0x77	; 119
 2e8:	5d df       	rcall	.-326    	; 0x1a4 <SD_Command>
		SD_Command(0x69, 0x40000000, 0xFF, 8);//ACMD41
 2ea:	2f ef       	ldi	r18, 0xFF	; 255
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	70 e4       	ldi	r23, 0x40	; 64
 2f4:	89 e6       	ldi	r24, 0x69	; 105
 2f6:	56 df       	rcall	.-340    	; 0x1a4 <SD_Command>
		SD_Command(0x7A, 0x00000000, 0xFF, 8);//CMD58 check OCR
 2f8:	2f ef       	ldi	r18, 0xFF	; 255
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	ba 01       	movw	r22, r20
 300:	8a e7       	ldi	r24, 0x7A	; 122
 302:	50 df       	rcall	.-352    	; 0x1a4 <SD_Command>

		//SD_read_alarm();

		SD_read_leilei();
 304:	b3 de       	rcall	.-666    	; 0x6c <SD_read_leilei>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	9f ef       	ldi	r25, 0xFF	; 255
 308:	21 e1       	ldi	r18, 0x11	; 17
 30a:	8a e7       	ldi	r24, 0x7A	; 122
 30c:	91 50       	subi	r25, 0x01	; 1
 30e:	20 40       	sbci	r18, 0x00	; 0
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x90>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x9a>
 316:	00 00       	nop
 318:	b9 cf       	rjmp	.-142    	; 0x28c <main+0x10>

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
