
Temperature and Humidity Display on LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  000005ce  00000662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800182  00800182  000006e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9a  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000251  00000000  00000000  0000127a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000354  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037d  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac8  00000000  00000000  00001d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000027d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee ec       	ldi	r30, 0xCE	; 206
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 38       	cpi	r26, 0x82	; 130
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e8       	ldi	r26, 0x82	; 130
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a6 3b       	cpi	r26, 0xB6	; 182
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	66 d2       	rcall	.+1228   	; 0x534 <main>
  68:	b0 c2       	rjmp	.+1376   	; 0x5ca <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <LCD_Write_Command>:
	}
	for(int i=16; i<32; i++){
		hum |= (Databuffer[i]<<(31-i));
	}
	for(int i=32; i<40; i++){
		checksum |= (Databuffer[i]<<(39-i));
  6c:	43 9a       	sbi	0x08, 3	; 8
  6e:	8b b9       	out	0x0b, r24	; 11
  70:	45 98       	cbi	0x08, 5	; 8
		temp |= (Databuffer[i]<<(15-i));
	}
	for(int i=16; i<32; i++){
		hum |= (Databuffer[i]<<(31-i));
	}
	for(int i=32; i<40; i++){
  72:	81 ee       	ldi	r24, 0xE1	; 225
  74:	94 e0       	ldi	r25, 0x04	; 4
  76:	01 97       	sbiw	r24, 0x01	; 1
		checksum |= (Databuffer[i]<<(39-i));
	}
	sum = (temp>>8)+(temp&(0xFF))+(hum>>8)+(hum&(0xFF));
  78:	f1 f7       	brne	.-4      	; 0x76 <LCD_Write_Command+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <LCD_Write_Command+0x10>
  7c:	00 00       	nop
	if(sum == checksum){
  7e:	43 98       	cbi	0x08, 3	; 8
  80:	81 ee       	ldi	r24, 0xE1	; 225
  82:	94 e0       	ldi	r25, 0x04	; 4
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <LCD_Write_Command+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <LCD_Write_Command+0x1e>
  8a:	00 00       	nop
	uint16_t temp = 0;
	uint16_t hum = 0;
	for(int i=0; i<16; i++){
		temp |= (Databuffer[i]<<(15-i));
	}
	for(int i=16; i<32; i++){
  8c:	43 9a       	sbi	0x08, 3	; 8
  8e:	08 95       	ret

00000090 <LCD_Write_Character>:
  90:	43 9a       	sbi	0x08, 3	; 8
  92:	8b b9       	out	0x0b, r24	; 11
		temperature = 0;
		humidity = 0;
		isNegative = 0;
		return 0;
	}
}
  94:	45 9a       	sbi	0x08, 5	; 8
  96:	89 ef       	ldi	r24, 0xF9	; 249
  98:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_Write_Character+0xa>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <LCD_Write_Character+0x10>
  a0:	00 00       	nop
void LCD_Write_Character(uint8_t character){
	PORTC |= (1<<LCD_E);
	PORTD = character;
	PORTC |= (1<<LCD_RS);
	_delay_ms(1);
	PORTC &= ~(1<<LCD_E);
  a2:	43 98       	cbi	0x08, 3	; 8
  a4:	89 ef       	ldi	r24, 0xF9	; 249
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_Write_Character+0x18>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_Write_Character+0x1e>
  ae:	00 00       	nop
	_delay_ms(1);
	PORTC |= (1<<LCD_E);
  b0:	43 9a       	sbi	0x08, 3	; 8
  b2:	08 95       	ret

000000b4 <LCD_Custom_Character>:
}
void LCD_Custom_Character(uint8_t CGRAM_Address, uint8_t pattern[8]){
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	if (CGRAM_Address < 8){
  bc:	88 30       	cpi	r24, 0x08	; 8
  be:	80 f4       	brcc	.+32     	; 0xe0 <LCD_Custom_Character+0x2c>
  c0:	8b 01       	movw	r16, r22
		LCD_Write_Command((CGRAM_Address*8)+0x40);
  c2:	88 0f       	add	r24, r24
  c4:	88 0f       	add	r24, r24
  c6:	88 0f       	add	r24, r24
  c8:	80 5c       	subi	r24, 0xC0	; 192
  ca:	d0 df       	rcall	.-96     	; 0x6c <LCD_Write_Command>
  cc:	e8 01       	movw	r28, r16
  ce:	08 5f       	subi	r16, 0xF8	; 248
  d0:	1f 4f       	sbci	r17, 0xFF	; 255
		for(int i=0; i<8; i++){
			LCD_Write_Character(pattern[i]);
  d2:	89 91       	ld	r24, Y+
  d4:	dd df       	rcall	.-70     	; 0x90 <LCD_Write_Character>
	PORTC |= (1<<LCD_E);
}
void LCD_Custom_Character(uint8_t CGRAM_Address, uint8_t pattern[8]){
	if (CGRAM_Address < 8){
		LCD_Write_Command((CGRAM_Address*8)+0x40);
		for(int i=0; i<8; i++){
  d6:	c0 17       	cp	r28, r16
  d8:	d1 07       	cpc	r29, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <LCD_Custom_Character+0x1e>
			LCD_Write_Character(pattern[i]);
		}
		LCD_Write_Command(0x80);
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	c6 df       	rcall	.-116    	; 0x6c <LCD_Write_Command>
	}
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	1f 91       	pop	r17
  e6:	0f 91       	pop	r16
  e8:	08 95       	ret

000000ea <LCD_Init>:
	each tick is 1 microseconds */
}

/*Initialize LCD Pins and Ports*/
void LCD_Init(void){
	DDRD = 0xFF;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1<<LCD_E)|(1<<LCD_RS);
  ee:	87 b1       	in	r24, 0x07	; 7
  f0:	88 62       	ori	r24, 0x28	; 40
  f2:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<LCD_E);
  f4:	43 9a       	sbi	0x08, 3	; 8
	LCD_Custom_Character(0, pattern);
  f6:	60 e5       	ldi	r22, 0x50	; 80
  f8:	71 e0       	ldi	r23, 0x01	; 1
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	db df       	rcall	.-74     	; 0xb4 <LCD_Custom_Character>
	LCD_Write_Command(Set_Datalength);
  fe:	88 e3       	ldi	r24, 0x38	; 56
 100:	b5 df       	rcall	.-150    	; 0x6c <LCD_Write_Command>
	LCD_Write_Command(0x0C); /*Display on cursor off*/
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	b3 df       	rcall	.-154    	; 0x6c <LCD_Write_Command>
	LCD_Write_Command(Clear_Screen);
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	b1 df       	rcall	.-158    	; 0x6c <LCD_Write_Command>
 10a:	08 95       	ret

0000010c <LCD_Write_Firstline>:
	LCD_Write_Command(Clear_Screen);
	LCD_Write_Firstline(firstline);
	LCD_Write_Secondline(secondline);
}

void LCD_Write_Firstline(char* firstline){
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	int i = 0;
	LCD_Write_Command(Cursor_1stline);
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	ab df       	rcall	.-170    	; 0x6c <LCD_Write_Command>
	while(*(firstline+i) != '\0'){
 116:	88 81       	ld	r24, Y
 118:	88 23       	and	r24, r24
 11a:	29 f0       	breq	.+10     	; 0x126 <LCD_Write_Firstline+0x1a>
 11c:	21 96       	adiw	r28, 0x01	; 1
		LCD_Write_Character((uint8_t)firstline[i]);
 11e:	b8 df       	rcall	.-144    	; 0x90 <LCD_Write_Character>
}

void LCD_Write_Firstline(char* firstline){
	int i = 0;
	LCD_Write_Command(Cursor_1stline);
	while(*(firstline+i) != '\0'){
 120:	89 91       	ld	r24, Y+
 122:	81 11       	cpse	r24, r1
 124:	fc cf       	rjmp	.-8      	; 0x11e <LCD_Write_Firstline+0x12>
		LCD_Write_Character((uint8_t)firstline[i]);
		i++;
	}
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <LCD_Write_Secondline>:

void LCD_Write_Secondline(char* secondline){
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ec 01       	movw	r28, r24
	int i = 0;
	LCD_Write_Command(Cursor_2ndline);
 132:	80 ec       	ldi	r24, 0xC0	; 192
 134:	9b df       	rcall	.-202    	; 0x6c <LCD_Write_Command>
	while(*(secondline+i) != '\0'){
 136:	88 81       	ld	r24, Y
 138:	88 23       	and	r24, r24
 13a:	29 f0       	breq	.+10     	; 0x146 <LCD_Write_Secondline+0x1a>
 13c:	21 96       	adiw	r28, 0x01	; 1
		LCD_Write_Character((uint8_t)secondline[i]);
 13e:	a8 df       	rcall	.-176    	; 0x90 <LCD_Write_Character>
}

void LCD_Write_Secondline(char* secondline){
	int i = 0;
	LCD_Write_Command(Cursor_2ndline);
	while(*(secondline+i) != '\0'){
 140:	89 91       	ld	r24, Y+
 142:	81 11       	cpse	r24, r1
 144:	fc cf       	rjmp	.-8      	; 0x13e <LCD_Write_Secondline+0x12>
		LCD_Write_Character((uint8_t)secondline[i]);
		i++;
	}
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <LCD_Write_String>:
			LCD_Write_Character(pattern[i]);
		}
		LCD_Write_Command(0x80);
	}
}
void LCD_Write_String(char* firstline, char* secondline){
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	8c 01       	movw	r16, r24
 156:	eb 01       	movw	r28, r22
	LCD_Write_Command(Clear_Screen);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	88 df       	rcall	.-240    	; 0x6c <LCD_Write_Command>
	LCD_Write_Firstline(firstline);
 15c:	c8 01       	movw	r24, r16
 15e:	d6 df       	rcall	.-84     	; 0x10c <LCD_Write_Firstline>
	LCD_Write_Secondline(secondline);
 160:	ce 01       	movw	r24, r28
 162:	e4 df       	rcall	.-56     	; 0x12c <LCD_Write_Secondline>
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <Display_Data>:
	while(*(secondline+i) != '\0'){
		LCD_Write_Character((uint8_t)secondline[i]);
		i++;
	}
}
void Display_Data(uint8_t num){
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
	int i = 0;
	LCD_Write_Firstline(firstline[num]);
 176:	20 e1       	ldi	r18, 0x10	; 16
 178:	82 9f       	mul	r24, r18
 17a:	c0 01       	movw	r24, r0
 17c:	11 24       	eor	r1, r1
 17e:	80 5f       	subi	r24, 0xF0	; 240
 180:	9e 4f       	sbci	r25, 0xFE	; 254
 182:	c4 df       	rcall	.-120    	; 0x10c <LCD_Write_Firstline>
	while(i!=temperaturestringlength){
 184:	80 91 83 01 	lds	r24, 0x0183
 188:	88 23       	and	r24, r24
 18a:	79 f0       	breq	.+30     	; 0x1aa <Display_Data+0x3c>
 18c:	00 eb       	ldi	r16, 0xB0	; 176
 18e:	11 e0       	ldi	r17, 0x01	; 1
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	d0 e0       	ldi	r29, 0x00	; 0
		LCD_Write_Character(temperaturestring[i]);
 194:	f8 01       	movw	r30, r16
 196:	81 91       	ld	r24, Z+
 198:	8f 01       	movw	r16, r30
 19a:	7a df       	rcall	.-268    	; 0x90 <LCD_Write_Character>
		i++;
 19c:	21 96       	adiw	r28, 0x01	; 1
	}
}
void Display_Data(uint8_t num){
	int i = 0;
	LCD_Write_Firstline(firstline[num]);
	while(i!=temperaturestringlength){
 19e:	80 91 83 01 	lds	r24, 0x0183
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	8c 17       	cp	r24, r28
 1a6:	9d 07       	cpc	r25, r29
 1a8:	a9 f7       	brne	.-22     	; 0x194 <Display_Data+0x26>
		LCD_Write_Character(temperaturestring[i]);
		i++;
	}
	LCD_Write_Secondline(secondline);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	be df       	rcall	.-132    	; 0x12c <LCD_Write_Secondline>
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <Opendrain_Set>:
/*Set DHT22 DATA PIN to input no pull-up resistor mode, which sends 1 to Data Pin*/
void Opendrain_Set(void){
	DDRB &= ~(1<<DHT22_DATA);
 1ba:	22 98       	cbi	0x04, 2	; 4
	PORTB &= ~(1<<DHT22_DATA);
 1bc:	2a 98       	cbi	0x05, 2	; 5
 1be:	08 95       	ret

000001c0 <Opendrain_Clear>:
}
/*Set DHT22 DATA PIN to output mode and output 0, which pull the DATA wire to low*/
void Opendrain_Clear(void){
	DDRB |= (1<<DHT22_DATA);
 1c0:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~(1<<DHT22_DATA);
 1c2:	2a 98       	cbi	0x05, 2	; 5
 1c4:	08 95       	ret

000001c6 <Start_DHT22>:
 1c6:	2f e3       	ldi	r18, 0x3F	; 63
 1c8:	8d e0       	ldi	r24, 0x0D	; 13
 1ca:	93 e0       	ldi	r25, 0x03	; 3
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <Start_DHT22+0x6>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <Start_DHT22+0x10>
 1d6:	00 00       	nop
}
/*Proceed the start process of DHT22*/
uint8_t Start_DHT22(void){
	_delay_ms(1000);
	Opendrain_Set();
 1d8:	f0 df       	rcall	.-32     	; 0x1ba <Opendrain_Set>
 1da:	89 ef       	ldi	r24, 0xF9	; 249
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <Start_DHT22+0x18>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <Start_DHT22+0x1e>
 1e4:	00 00       	nop
	_delay_ms(1);
	Opendrain_Clear();
 1e6:	ec df       	rcall	.-40     	; 0x1c0 <Opendrain_Clear>
 1e8:	89 ef       	ldi	r24, 0xF9	; 249
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <Start_DHT22+0x26>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <Start_DHT22+0x2c>
 1f2:	00 00       	nop
	_delay_ms(1);
	Opendrain_Set();
 1f4:	e2 df       	rcall	.-60     	; 0x1ba <Opendrain_Set>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	9d e0       	ldi	r25, 0x0D	; 13
 1f8:	9a 95       	dec	r25
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <Start_DHT22+0x32>
 1fc:	00 00       	nop
	_delay_us(40);
	TCNT1 = 0;
 1fe:	10 92 85 00 	sts	0x0085, r1
 202:	10 92 84 00 	sts	0x0084, r1
	while((PINB&(1<<DHT22_DATA))!=0x00){ /*wait for Data Pin to go low */
		if (TCNT1 >80){
 206:	e4 e8       	ldi	r30, 0x84	; 132
 208:	f0 e0       	ldi	r31, 0x00	; 0
	Opendrain_Clear();
	_delay_ms(1);
	Opendrain_Set();
	_delay_us(40);
	TCNT1 = 0;
	while((PINB&(1<<DHT22_DATA))!=0x00){ /*wait for Data Pin to go low */
 20a:	05 c0       	rjmp	.+10     	; 0x216 <Start_DHT22+0x50>
		if (TCNT1 >80){
 20c:	80 81       	ld	r24, Z
 20e:	91 81       	ldd	r25, Z+1	; 0x01
 210:	81 35       	cpi	r24, 0x51	; 81
 212:	91 05       	cpc	r25, r1
 214:	b8 f4       	brcc	.+46     	; 0x244 <Start_DHT22+0x7e>
	Opendrain_Clear();
	_delay_ms(1);
	Opendrain_Set();
	_delay_us(40);
	TCNT1 = 0;
	while((PINB&(1<<DHT22_DATA))!=0x00){ /*wait for Data Pin to go low */
 216:	1a 99       	sbic	0x03, 2	; 3
 218:	f9 cf       	rjmp	.-14     	; 0x20c <Start_DHT22+0x46>
		if (TCNT1 >80){
			return 0;
		}
	}
	TCNT1 = 0;
 21a:	10 92 85 00 	sts	0x0085, r1
 21e:	10 92 84 00 	sts	0x0084, r1
	while(!(PINB&(1<<DHT22_DATA))){ /*wait for Data Pin to go high*/
		if (TCNT1 >160){
 222:	e4 e8       	ldi	r30, 0x84	; 132
 224:	f0 e0       	ldi	r31, 0x00	; 0
		if (TCNT1 >80){
			return 0;
		}
	}
	TCNT1 = 0;
	while(!(PINB&(1<<DHT22_DATA))){ /*wait for Data Pin to go high*/
 226:	05 c0       	rjmp	.+10     	; 0x232 <Start_DHT22+0x6c>
		if (TCNT1 >160){
 228:	20 81       	ld	r18, Z
 22a:	31 81       	ldd	r19, Z+1	; 0x01
 22c:	21 3a       	cpi	r18, 0xA1	; 161
 22e:	31 05       	cpc	r19, r1
 230:	50 f4       	brcc	.+20     	; 0x246 <Start_DHT22+0x80>
		if (TCNT1 >80){
			return 0;
		}
	}
	TCNT1 = 0;
	while(!(PINB&(1<<DHT22_DATA))){ /*wait for Data Pin to go high*/
 232:	93 b1       	in	r25, 0x03	; 3
 234:	89 2f       	mov	r24, r25
 236:	84 70       	andi	r24, 0x04	; 4
 238:	92 ff       	sbrs	r25, 2
 23a:	f6 cf       	rjmp	.-20     	; 0x228 <Start_DHT22+0x62>
		if (TCNT1 >160){
			return 0;
		}
	}
	while((PINB&(1<<DHT22_DATA))!=0x00); /*wait for Data Pin to go low*/
 23c:	1a 99       	sbic	0x03, 2	; 3
 23e:	fe cf       	rjmp	.-4      	; 0x23c <Start_DHT22+0x76>
	return 1;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	08 95       	ret
	Opendrain_Set();
	_delay_us(40);
	TCNT1 = 0;
	while((PINB&(1<<DHT22_DATA))!=0x00){ /*wait for Data Pin to go low */
		if (TCNT1 >80){
			return 0;
 244:	80 e0       	ldi	r24, 0x00	; 0
			return 0;
		}
	}
	while((PINB&(1<<DHT22_DATA))!=0x00); /*wait for Data Pin to go low*/
	return 1;
}
 246:	08 95       	ret

00000248 <Datatransmit_DHT22>:
/*Proceed the data transmit process of DHT22*/
uint8_t Datatransmit_DHT22(uint8_t Databuffer [40]){
 248:	ac 01       	movw	r20, r24
 24a:	48 5d       	subi	r20, 0xD8	; 216
 24c:	5f 4f       	sbci	r21, 0xFF	; 255
	for(int i = 0; i<40; i++){
		while(!(PINB&(1<<DHT22_DATA))); /*wait for Data Pin to go high*/
		TCNT1 = 0;
 24e:	e4 e8       	ldi	r30, 0x84	; 132
 250:	f0 e0       	ldi	r31, 0x00	; 0
			if(TCNT1 >= 1000){
				return 0;
			}
		}
		if(TCNT1>50){
			Databuffer[i] = 1;
 252:	61 e0       	ldi	r22, 0x01	; 1
	return 1;
}
/*Proceed the data transmit process of DHT22*/
uint8_t Datatransmit_DHT22(uint8_t Databuffer [40]){
	for(int i = 0; i<40; i++){
		while(!(PINB&(1<<DHT22_DATA))); /*wait for Data Pin to go high*/
 254:	1a 9b       	sbis	0x03, 2	; 3
 256:	fe cf       	rjmp	.-4      	; 0x254 <Datatransmit_DHT22+0xc>
		TCNT1 = 0;
 258:	11 82       	std	Z+1, r1	; 0x01
 25a:	10 82       	st	Z, r1
		while((PINB&(1<<DHT22_DATA))!=0x00){ /*wait for Data Pin to go high*/
 25c:	05 c0       	rjmp	.+10     	; 0x268 <Datatransmit_DHT22+0x20>
			if(TCNT1 >= 1000){
 25e:	20 81       	ld	r18, Z
 260:	31 81       	ldd	r19, Z+1	; 0x01
 262:	28 3e       	cpi	r18, 0xE8	; 232
 264:	33 40       	sbci	r19, 0x03	; 3
 266:	90 f4       	brcc	.+36     	; 0x28c <Datatransmit_DHT22+0x44>
/*Proceed the data transmit process of DHT22*/
uint8_t Datatransmit_DHT22(uint8_t Databuffer [40]){
	for(int i = 0; i<40; i++){
		while(!(PINB&(1<<DHT22_DATA))); /*wait for Data Pin to go high*/
		TCNT1 = 0;
		while((PINB&(1<<DHT22_DATA))!=0x00){ /*wait for Data Pin to go high*/
 268:	1a 99       	sbic	0x03, 2	; 3
 26a:	f9 cf       	rjmp	.-14     	; 0x25e <Datatransmit_DHT22+0x16>
			if(TCNT1 >= 1000){
				return 0;
			}
		}
		if(TCNT1>50){
 26c:	20 81       	ld	r18, Z
 26e:	31 81       	ldd	r19, Z+1	; 0x01
 270:	23 33       	cpi	r18, 0x33	; 51
 272:	31 05       	cpc	r19, r1
 274:	18 f0       	brcs	.+6      	; 0x27c <Datatransmit_DHT22+0x34>
			Databuffer[i] = 1;
 276:	dc 01       	movw	r26, r24
 278:	6c 93       	st	X, r22
 27a:	02 c0       	rjmp	.+4      	; 0x280 <Datatransmit_DHT22+0x38>
		}else{
			Databuffer[i] = 0;
 27c:	dc 01       	movw	r26, r24
 27e:	1c 92       	st	X, r1
 280:	01 96       	adiw	r24, 0x01	; 1
	while((PINB&(1<<DHT22_DATA))!=0x00); /*wait for Data Pin to go low*/
	return 1;
}
/*Proceed the data transmit process of DHT22*/
uint8_t Datatransmit_DHT22(uint8_t Databuffer [40]){
	for(int i = 0; i<40; i++){
 282:	84 17       	cp	r24, r20
 284:	95 07       	cpc	r25, r21
 286:	31 f7       	brne	.-52     	; 0x254 <Datatransmit_DHT22+0xc>
			Databuffer[i] = 1;
		}else{
			Databuffer[i] = 0;
		}
	}
	return 1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	08 95       	ret
	for(int i = 0; i<40; i++){
		while(!(PINB&(1<<DHT22_DATA))); /*wait for Data Pin to go high*/
		TCNT1 = 0;
		while((PINB&(1<<DHT22_DATA))!=0x00){ /*wait for Data Pin to go high*/
			if(TCNT1 >= 1000){
				return 0;
 28c:	80 e0       	ldi	r24, 0x00	; 0
		}else{
			Databuffer[i] = 0;
		}
	}
	return 1;
}
 28e:	08 95       	ret

00000290 <DHT22_Measurement>:
		isNegative = 0;
		return 0;
	}
}

void DHT22_Measurement(void){
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
	uint8_t sum = 0;
	uint8_t checksum = 0;
	uint16_t temp = 0;
	uint16_t hum = 0;
	if(Start_DHT22()){
 294:	98 df       	rcall	.-208    	; 0x1c6 <Start_DHT22>
 296:	88 23       	and	r24, r24
 298:	09 f4       	brne	.+2      	; 0x29c <DHT22_Measurement+0xc>
 29a:	32 c1       	rjmp	.+612    	; 0x500 <__stack+0x201>
		if(Datatransmit_DHT22(Databuffer)){
 29c:	88 e8       	ldi	r24, 0x88	; 136
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	d3 df       	rcall	.-90     	; 0x248 <Datatransmit_DHT22>
 2a2:	88 23       	and	r24, r24
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <DHT22_Measurement+0x18>
 2a6:	26 c1       	rjmp	.+588    	; 0x4f4 <__stack+0x1f5>
 2a8:	e8 e8       	ldi	r30, 0x88	; 136
 2aa:	f1 e0       	ldi	r31, 0x01	; 1
 2ac:	68 e9       	ldi	r22, 0x98	; 152
 2ae:	71 e0       	ldi	r23, 0x01	; 1
 2b0:	2f e0       	ldi	r18, 0x0F	; 15
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	50 e0       	ldi	r21, 0x00	; 0
			for(int i=0; i<16; i++){
				hum |= (Databuffer[i]<<(15-i));
 2b8:	81 91       	ld	r24, Z+
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 2e       	mov	r0, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DHT22_Measurement+0x34>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DHT22_Measurement+0x30>
 2c8:	48 2b       	or	r20, r24
 2ca:	59 2b       	or	r21, r25
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	31 09       	sbc	r19, r1
	uint8_t checksum = 0;
	uint16_t temp = 0;
	uint16_t hum = 0;
	if(Start_DHT22()){
		if(Datatransmit_DHT22(Databuffer)){
			for(int i=0; i<16; i++){
 2d0:	e6 17       	cp	r30, r22
 2d2:	f7 07       	cpc	r31, r23
 2d4:	89 f7       	brne	.-30     	; 0x2b8 <DHT22_Measurement+0x28>
 2d6:	1a c1       	rjmp	.+564    	; 0x50c <__stack+0x20d>
				hum |= (Databuffer[i]<<(15-i));
			}
			for(int i=16; i<32; i++){
				temp |= (Databuffer[i]<<(31-i));
 2d8:	81 91       	ld	r24, Z+
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 2e       	mov	r0, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DHT22_Measurement+0x54>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	0a 94       	dec	r0
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DHT22_Measurement+0x50>
 2e8:	68 2b       	or	r22, r24
 2ea:	79 2b       	or	r23, r25
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	31 09       	sbc	r19, r1
	if(Start_DHT22()){
		if(Datatransmit_DHT22(Databuffer)){
			for(int i=0; i<16; i++){
				hum |= (Databuffer[i]<<(15-i));
			}
			for(int i=16; i<32; i++){
 2f0:	ea 17       	cp	r30, r26
 2f2:	fb 07       	cpc	r31, r27
 2f4:	89 f7       	brne	.-30     	; 0x2d8 <DHT22_Measurement+0x48>
 2f6:	13 c1       	rjmp	.+550    	; 0x51e <__stack+0x21f>
				temp |= (Databuffer[i]<<(31-i));
			}
			for(int i=32; i<40; i++){
				checksum |= (Databuffer[i]<<(39-i));
 2f8:	81 91       	ld	r24, Z+
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <__stack+0x5>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <__stack+0x1>
 308:	a8 2b       	or	r26, r24
 30a:	21 50       	subi	r18, 0x01	; 1
 30c:	31 09       	sbc	r19, r1
				hum |= (Databuffer[i]<<(15-i));
			}
			for(int i=16; i<32; i++){
				temp |= (Databuffer[i]<<(31-i));
			}
			for(int i=32; i<40; i++){
 30e:	ec 17       	cp	r30, r28
 310:	fd 07       	cpc	r31, r29
 312:	91 f7       	brne	.-28     	; 0x2f8 <DHT22_Measurement+0x68>
 314:	85 2f       	mov	r24, r21
 316:	84 0f       	add	r24, r20
 318:	86 0f       	add	r24, r22
				checksum |= (Databuffer[i]<<(39-i));
			}
			sum = (temp>>8)+(temp&(0xFF))+(hum>>8)+(hum&(0xFF));
 31a:	87 0f       	add	r24, r23
			if(sum == checksum){
 31c:	a8 13       	cpse	r26, r24
 31e:	14 c0       	rjmp	.+40     	; 0x348 <__stack+0x49>
				humidity = hum;
 320:	50 93 85 01 	sts	0x0185, r21
 324:	40 93 84 01 	sts	0x0184, r20
				if((temp>>15))
 328:	77 23       	and	r23, r23
 32a:	4c f4       	brge	.+18     	; 0x33e <__stack+0x3f>
				{
					temp &= ~(1<<15);
 32c:	7f 77       	andi	r23, 0x7F	; 127
					temperature =temp;
 32e:	70 93 87 01 	sts	0x0187, r23
 332:	60 93 86 01 	sts	0x0186, r22
					isNegative = 1;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 82 01 	sts	0x0182, r24
 33c:	0f c0       	rjmp	.+30     	; 0x35c <__stack+0x5d>
					}else{
					temperature = temp;
 33e:	70 93 87 01 	sts	0x0187, r23
 342:	60 93 86 01 	sts	0x0186, r22
 346:	0a c0       	rjmp	.+20     	; 0x35c <__stack+0x5d>
				}
				}else{
				temperature = 0;
 348:	10 92 87 01 	sts	0x0187, r1
 34c:	10 92 86 01 	sts	0x0186, r1
				humidity = 0;
 350:	10 92 85 01 	sts	0x0185, r1
 354:	10 92 84 01 	sts	0x0184, r1
				isNegative = 0;
 358:	10 92 82 01 	sts	0x0182, r1
			}

			int i = 0;
			if(humidity/100){
 35c:	40 91 84 01 	lds	r20, 0x0184
 360:	50 91 85 01 	lds	r21, 0x0185
 364:	44 36       	cpi	r20, 0x64	; 100
 366:	51 05       	cpc	r21, r1
 368:	80 f0       	brcs	.+32     	; 0x38a <__stack+0x8b>
				secondline[10+i] = '0'+(humidity/100);
 36a:	9a 01       	movw	r18, r20
 36c:	36 95       	lsr	r19
 36e:	27 95       	ror	r18
 370:	36 95       	lsr	r19
 372:	27 95       	ror	r18
 374:	ab e7       	ldi	r26, 0x7B	; 123
 376:	b4 e1       	ldi	r27, 0x14	; 20
 378:	1c d1       	rcall	.+568    	; 0x5b2 <__umulhisi3>
 37a:	96 95       	lsr	r25
 37c:	87 95       	ror	r24
 37e:	80 5d       	subi	r24, 0xD0	; 208
 380:	80 93 0a 01 	sts	0x010A, r24
				i++;
 384:	e1 e0       	ldi	r30, 0x01	; 1
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <__stack+0x8f>
				temperature = 0;
				humidity = 0;
				isNegative = 0;
			}

			int i = 0;
 38a:	e0 e0       	ldi	r30, 0x00	; 0
 38c:	f0 e0       	ldi	r31, 0x00	; 0
			if(humidity/100){
				secondline[10+i] = '0'+(humidity/100);
				i++;
			}
			if(humidity/10){
 38e:	4a 30       	cpi	r20, 0x0A	; 10
 390:	51 05       	cpc	r21, r1
 392:	18 f1       	brcs	.+70     	; 0x3da <__stack+0xdb>
				secondline[10+i] = '0'+((humidity%100)/10);
 394:	ef 01       	movw	r28, r30
 396:	c0 50       	subi	r28, 0x00	; 0
 398:	df 4f       	sbci	r29, 0xFF	; 255
 39a:	9a 01       	movw	r18, r20
 39c:	36 95       	lsr	r19
 39e:	27 95       	ror	r18
 3a0:	36 95       	lsr	r19
 3a2:	27 95       	ror	r18
 3a4:	ab e7       	ldi	r26, 0x7B	; 123
 3a6:	b4 e1       	ldi	r27, 0x14	; 20
 3a8:	04 d1       	rcall	.+520    	; 0x5b2 <__umulhisi3>
 3aa:	96 95       	lsr	r25
 3ac:	87 95       	ror	r24
 3ae:	64 e6       	ldi	r22, 0x64	; 100
 3b0:	68 9f       	mul	r22, r24
 3b2:	90 01       	movw	r18, r0
 3b4:	69 9f       	mul	r22, r25
 3b6:	30 0d       	add	r19, r0
 3b8:	11 24       	eor	r1, r1
 3ba:	ca 01       	movw	r24, r20
 3bc:	82 1b       	sub	r24, r18
 3be:	93 0b       	sbc	r25, r19
 3c0:	9c 01       	movw	r18, r24
 3c2:	ad ec       	ldi	r26, 0xCD	; 205
 3c4:	bc ec       	ldi	r27, 0xCC	; 204
 3c6:	f5 d0       	rcall	.+490    	; 0x5b2 <__umulhisi3>
 3c8:	96 95       	lsr	r25
 3ca:	87 95       	ror	r24
 3cc:	96 95       	lsr	r25
 3ce:	87 95       	ror	r24
 3d0:	96 95       	lsr	r25
 3d2:	87 95       	ror	r24
 3d4:	80 5d       	subi	r24, 0xD0	; 208
 3d6:	8a 87       	std	Y+10, r24	; 0x0a
				i++;
 3d8:	31 96       	adiw	r30, 0x01	; 1
			}
			secondline[10+i] = '.';
 3da:	e0 50       	subi	r30, 0x00	; 0
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	8e e2       	ldi	r24, 0x2E	; 46
 3e0:	82 87       	std	Z+10, r24	; 0x0a
			secondline[11+i] = '0'+(humidity%10);
 3e2:	9a 01       	movw	r18, r20
 3e4:	ad ec       	ldi	r26, 0xCD	; 205
 3e6:	bc ec       	ldi	r27, 0xCC	; 204
 3e8:	e4 d0       	rcall	.+456    	; 0x5b2 <__umulhisi3>
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	9c 01       	movw	r18, r24
 3f8:	22 0f       	add	r18, r18
 3fa:	33 1f       	adc	r19, r19
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	82 0f       	add	r24, r18
 40a:	93 1f       	adc	r25, r19
 40c:	48 1b       	sub	r20, r24
 40e:	59 0b       	sbc	r21, r25
 410:	40 5d       	subi	r20, 0xD0	; 208
 412:	43 87       	std	Z+11, r20	; 0x0b
			secondline[12+i] = '%';
 414:	85 e2       	ldi	r24, 0x25	; 37
 416:	84 87       	std	Z+12, r24	; 0x0c
			secondline[13+i] = '\0';
 418:	15 86       	std	Z+13, r1	; 0x0d
			i = 0;
			if (isNegative){
 41a:	80 91 82 01 	lds	r24, 0x0182
 41e:	88 23       	and	r24, r24
 420:	31 f0       	breq	.+12     	; 0x42e <__stack+0x12f>
				temperaturestring[i] = '-';
 422:	8d e2       	ldi	r24, 0x2D	; 45
 424:	80 93 b0 01 	sts	0x01B0, r24
				i++;
 428:	e1 e0       	ldi	r30, 0x01	; 1
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__stack+0x133>
			}
			secondline[10+i] = '.';
			secondline[11+i] = '0'+(humidity%10);
			secondline[12+i] = '%';
			secondline[13+i] = '\0';
			i = 0;
 42e:	e0 e0       	ldi	r30, 0x00	; 0
 430:	f0 e0       	ldi	r31, 0x00	; 0
			if (isNegative){
				temperaturestring[i] = '-';
				i++;
			}
			if(temperature/100){
 432:	40 91 86 01 	lds	r20, 0x0186
 436:	50 91 87 01 	lds	r21, 0x0187
 43a:	44 36       	cpi	r20, 0x64	; 100
 43c:	51 05       	cpc	r21, r1
 43e:	80 f0       	brcs	.+32     	; 0x460 <__stack+0x161>
				temperaturestring[i] = '0'+(temperature/100);
 440:	ef 01       	movw	r28, r30
 442:	c0 55       	subi	r28, 0x50	; 80
 444:	de 4f       	sbci	r29, 0xFE	; 254
 446:	9a 01       	movw	r18, r20
 448:	36 95       	lsr	r19
 44a:	27 95       	ror	r18
 44c:	36 95       	lsr	r19
 44e:	27 95       	ror	r18
 450:	ab e7       	ldi	r26, 0x7B	; 123
 452:	b4 e1       	ldi	r27, 0x14	; 20
 454:	ae d0       	rcall	.+348    	; 0x5b2 <__umulhisi3>
 456:	96 95       	lsr	r25
 458:	87 95       	ror	r24
 45a:	80 5d       	subi	r24, 0xD0	; 208
 45c:	88 83       	st	Y, r24
				i++;
 45e:	31 96       	adiw	r30, 0x01	; 1
			}
			if(temperature/10){
 460:	4a 30       	cpi	r20, 0x0A	; 10
 462:	51 05       	cpc	r21, r1
 464:	18 f1       	brcs	.+70     	; 0x4ac <__stack+0x1ad>
				temperaturestring[i] = '0'+((temperature%100)/10);
 466:	ef 01       	movw	r28, r30
 468:	c0 55       	subi	r28, 0x50	; 80
 46a:	de 4f       	sbci	r29, 0xFE	; 254
 46c:	9a 01       	movw	r18, r20
 46e:	36 95       	lsr	r19
 470:	27 95       	ror	r18
 472:	36 95       	lsr	r19
 474:	27 95       	ror	r18
 476:	ab e7       	ldi	r26, 0x7B	; 123
 478:	b4 e1       	ldi	r27, 0x14	; 20
 47a:	9b d0       	rcall	.+310    	; 0x5b2 <__umulhisi3>
 47c:	96 95       	lsr	r25
 47e:	87 95       	ror	r24
 480:	64 e6       	ldi	r22, 0x64	; 100
 482:	68 9f       	mul	r22, r24
 484:	90 01       	movw	r18, r0
 486:	69 9f       	mul	r22, r25
 488:	30 0d       	add	r19, r0
 48a:	11 24       	eor	r1, r1
 48c:	ca 01       	movw	r24, r20
 48e:	82 1b       	sub	r24, r18
 490:	93 0b       	sbc	r25, r19
 492:	9c 01       	movw	r18, r24
 494:	ad ec       	ldi	r26, 0xCD	; 205
 496:	bc ec       	ldi	r27, 0xCC	; 204
 498:	8c d0       	rcall	.+280    	; 0x5b2 <__umulhisi3>
 49a:	96 95       	lsr	r25
 49c:	87 95       	ror	r24
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	96 95       	lsr	r25
 4a4:	87 95       	ror	r24
 4a6:	80 5d       	subi	r24, 0xD0	; 208
 4a8:	88 83       	st	Y, r24
				i++;
 4aa:	31 96       	adiw	r30, 0x01	; 1
			}
			temperaturestring[i] = '.';
 4ac:	ef 01       	movw	r28, r30
 4ae:	c0 55       	subi	r28, 0x50	; 80
 4b0:	de 4f       	sbci	r29, 0xFE	; 254
 4b2:	8e e2       	ldi	r24, 0x2E	; 46
 4b4:	88 83       	st	Y, r24
			temperaturestring[i+1] = '0'+(temperature%10);
 4b6:	9a 01       	movw	r18, r20
 4b8:	ad ec       	ldi	r26, 0xCD	; 205
 4ba:	bc ec       	ldi	r27, 0xCC	; 204
 4bc:	7a d0       	rcall	.+244    	; 0x5b2 <__umulhisi3>
 4be:	96 95       	lsr	r25
 4c0:	87 95       	ror	r24
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	96 95       	lsr	r25
 4c8:	87 95       	ror	r24
 4ca:	9c 01       	movw	r18, r24
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	28 0f       	add	r18, r24
 4de:	39 1f       	adc	r19, r25
 4e0:	42 1b       	sub	r20, r18
 4e2:	53 0b       	sbc	r21, r19
 4e4:	40 5d       	subi	r20, 0xD0	; 208
 4e6:	49 83       	std	Y+1, r20	; 0x01
			temperaturestring[i+2] = '\0';
 4e8:	1a 82       	std	Y+2, r1	; 0x02
			temperaturestringlength = i+3;
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	8e 0f       	add	r24, r30
 4ee:	80 93 83 01 	sts	0x0183, r24
 4f2:	1d c0       	rjmp	.+58     	; 0x52e <__stack+0x22f>
			}else{
			LCD_Write_String("Data Wrong","");
 4f4:	60 e8       	ldi	r22, 0x80	; 128
 4f6:	71 e0       	ldi	r23, 0x01	; 1
 4f8:	88 e5       	ldi	r24, 0x58	; 88
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	27 de       	rcall	.-946    	; 0x14c <LCD_Write_String>
 4fe:	17 c0       	rjmp	.+46     	; 0x52e <__stack+0x22f>
		}
		}else{
		LCD_Write_String("DHT Init Fail","");
 500:	60 e8       	ldi	r22, 0x80	; 128
 502:	71 e0       	ldi	r23, 0x01	; 1
 504:	83 e6       	ldi	r24, 0x63	; 99
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	21 de       	rcall	.-958    	; 0x14c <LCD_Write_String>
 50a:	11 c0       	rjmp	.+34     	; 0x52e <__stack+0x22f>
 50c:	e8 e9       	ldi	r30, 0x98	; 152
 50e:	f1 e0       	ldi	r31, 0x01	; 1
 510:	a8 ea       	ldi	r26, 0xA8	; 168
 512:	b1 e0       	ldi	r27, 0x01	; 1
	uint8_t checksum = 0;
	uint16_t temp = 0;
	uint16_t hum = 0;
	if(Start_DHT22()){
		if(Datatransmit_DHT22(Databuffer)){
			for(int i=0; i<16; i++){
 514:	2f e0       	ldi	r18, 0x0F	; 15
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	dd ce       	rjmp	.-582    	; 0x2d8 <DHT22_Measurement+0x48>
 51e:	e8 ea       	ldi	r30, 0xA8	; 168
 520:	f1 e0       	ldi	r31, 0x01	; 1
 522:	c0 eb       	ldi	r28, 0xB0	; 176
 524:	d1 e0       	ldi	r29, 0x01	; 1
				hum |= (Databuffer[i]<<(15-i));
			}
			for(int i=16; i<32; i++){
 526:	27 e0       	ldi	r18, 0x07	; 7
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	a0 e0       	ldi	r26, 0x00	; 0
 52c:	e5 ce       	rjmp	.-566    	; 0x2f8 <DHT22_Measurement+0x68>
			LCD_Write_String("Data Wrong","");
		}
		}else{
		LCD_Write_String("DHT Init Fail","");
	}
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <main>:
void Display_Data(uint8_t num);

int main(void)
{
	int counter = 0;
    DDRB |= (1<<LED_PIN);
 534:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= (1<<LED_PIN);
 536:	2f 9a       	sbi	0x05, 7	; 5
	LCD_Init();
 538:	d8 dd       	rcall	.-1104   	; 0xea <LCD_Init>
	Opendrain_Set();
 53a:	3f de       	rcall	.-898    	; 0x1ba <Opendrain_Set>
	}
}

inline void initTimer1(void) {
	/* Normal mode (default), just counting */
	TCCR1B |= (1 << CS10);
 53c:	e1 e8       	ldi	r30, 0x81	; 129
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	81 60       	ori	r24, 0x01	; 1
 544:	80 83       	st	Z, r24
    DDRB |= (1<<LED_PIN);
	PORTB |= (1<<LED_PIN);
	LCD_Init();
	Opendrain_Set();
	initTimer1();
	PORTB &= ~(1<<LED_PIN);
 546:	2f 98       	cbi	0x05, 7	; 5
	LCD_Write_String("Initializing...","");
 548:	60 e8       	ldi	r22, 0x80	; 128
 54a:	71 e0       	ldi	r23, 0x01	; 1
 54c:	81 e7       	ldi	r24, 0x71	; 113
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	fd dd       	rcall	.-1030   	; 0x14c <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 552:	2f e3       	ldi	r18, 0x3F	; 63
 554:	8d e0       	ldi	r24, 0x0D	; 13
 556:	93 e0       	ldi	r25, 0x03	; 3
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <main+0x24>
 560:	00 c0       	rjmp	.+0      	; 0x562 <main+0x2e>
 562:	00 00       	nop
	_delay_ms(1000);
	DHT22_Measurement();
 564:	95 de       	rcall	.-726    	; 0x290 <DHT22_Measurement>
void LCD_Write_Secondline(char* secondline);
void Display_Data(uint8_t num);

int main(void)
{
	int counter = 0;
 566:	c0 e0       	ldi	r28, 0x00	; 0
 568:	d0 e0       	ldi	r29, 0x00	; 0
		if(counter>=4){
			counter = 0;
		}
		Display_Data(counter);
		_delay_ms(1000);
		counter ++;
 56a:	01 e0       	ldi	r16, 0x01	; 1
 56c:	10 e0       	ldi	r17, 0x00	; 0
 56e:	01 c0       	rjmp	.+2      	; 0x572 <main+0x3e>
	LCD_Write_String("Initializing...","");
	_delay_ms(1000);
	DHT22_Measurement();
	while(1){
		if(counter%2){
			DHT22_Measurement();
 570:	8f de       	rcall	.-738    	; 0x290 <DHT22_Measurement>
		}
		if(counter>=4){
 572:	c4 30       	cpi	r28, 0x04	; 4
 574:	d1 05       	cpc	r29, r1
 576:	7c f4       	brge	.+30     	; 0x596 <main+0x62>
			counter = 0;
		}
		Display_Data(counter);
 578:	8c 2f       	mov	r24, r28
 57a:	f9 dd       	rcall	.-1038   	; 0x16e <Display_Data>
 57c:	2f e3       	ldi	r18, 0x3F	; 63
 57e:	8d e0       	ldi	r24, 0x0D	; 13
 580:	93 e0       	ldi	r25, 0x03	; 3
 582:	21 50       	subi	r18, 0x01	; 1
 584:	80 40       	sbci	r24, 0x00	; 0
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <main+0x4e>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <main+0x58>
 58c:	00 00       	nop
		_delay_ms(1000);
		counter ++;
 58e:	21 96       	adiw	r28, 0x01	; 1
	PORTB &= ~(1<<LED_PIN);
	LCD_Write_String("Initializing...","");
	_delay_ms(1000);
	DHT22_Measurement();
	while(1){
		if(counter%2){
 590:	c0 ff       	sbrs	r28, 0
 592:	ef cf       	rjmp	.-34     	; 0x572 <main+0x3e>
 594:	ed cf       	rjmp	.-38     	; 0x570 <main+0x3c>
			DHT22_Measurement();
		}
		if(counter>=4){
			counter = 0;
		}
		Display_Data(counter);
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	ea dd       	rcall	.-1068   	; 0x16e <Display_Data>
 59a:	8f e3       	ldi	r24, 0x3F	; 63
 59c:	9d e0       	ldi	r25, 0x0D	; 13
 59e:	23 e0       	ldi	r18, 0x03	; 3
 5a0:	81 50       	subi	r24, 0x01	; 1
 5a2:	90 40       	sbci	r25, 0x00	; 0
 5a4:	20 40       	sbci	r18, 0x00	; 0
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <main+0x6c>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <main+0x76>
 5aa:	00 00       	nop
		_delay_ms(1000);
		counter ++;
 5ac:	c0 2f       	mov	r28, r16
 5ae:	d1 2f       	mov	r29, r17
 5b0:	df cf       	rjmp	.-66     	; 0x570 <main+0x3c>

000005b2 <__umulhisi3>:
 5b2:	a2 9f       	mul	r26, r18
 5b4:	b0 01       	movw	r22, r0
 5b6:	b3 9f       	mul	r27, r19
 5b8:	c0 01       	movw	r24, r0
 5ba:	a3 9f       	mul	r26, r19
 5bc:	01 d0       	rcall	.+2      	; 0x5c0 <__umulhisi3+0xe>
 5be:	b2 9f       	mul	r27, r18
 5c0:	70 0d       	add	r23, r0
 5c2:	81 1d       	adc	r24, r1
 5c4:	11 24       	eor	r1, r1
 5c6:	91 1d       	adc	r25, r1
 5c8:	08 95       	ret

000005ca <_exit>:
 5ca:	f8 94       	cli

000005cc <__stop_program>:
 5cc:	ff cf       	rjmp	.-2      	; 0x5cc <__stop_program>
